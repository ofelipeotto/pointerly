/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Pointerly", [], factory);
	else if(typeof exports === 'object')
		exports["Pointerly"] = factory();
	else
		root["Pointerly"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/core/core.js":
/*!**************************!*\
  !*** ./src/core/core.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pointerly)\n/* harmony export */ });\nclass Pointerly {\n\n    constructor() {\n\n        //------------------------------------------------------\n        // Infos\n\n        this.valid = false;\n\n        this.consolePrefix = `[Pointerly]`;\n\n        this.debug = false;\n\n        this.console = this.createConsole();\n\n        this.webGLSupported = this.hasWebGLSupport();\n\n        if (!this.webGLSupported) {\n            this.console.error('WebGL not supported.');\n        }\n\n        this.inWrapper = false;\n\n        this.loaded = false;\n\n        this.cursor = {\n\n            type: null,\n\n            flag: {\n                pos: {\n                    x: 0,\n                    y: 0,\n                }\n            },\n\n            pos: {\n                x: 0,\n                y: 0,\n            },\n\n            elementUnder: null,\n        };\n\n        this._viewport = {};\n\n        this.selector = 'data-cursor';\n\n        this.flagSelector = 'data-cursor-flag';\n\n        this.systemCursors = false;\n\n        this.lastCursorType = null;\n\n        this.lastCursorFlag = null;\n\n        this.lastEvent = null;\n\n        this.fullscreenActive = false;\n\n        this.fullscreenActiveMsg = false;\n\n        this.isMobileDevice = false;\n\n        this.isMobileDeviceMsg = false;\n\n        this.eventClassTimeout = {\n            move: null,\n            click: null,\n            dblclick: null,\n            mousedown: null,\n            mouseup: null\n        };\n\n        this.checkFlagSizeTimeout = {};\n\n        //------------------------------------------------------\n        // Triggers\n\n        this.triggers = {\n            init: [],\n\n            enter: [],\n            move: [],\n            click: [],\n            dblclick: [],\n            mousedown: [],\n            mouseup: [],\n            leave: [],\n\n            refresh: [],\n            complete: [],\n            updateCursor: []\n        };\n\n        this.addEventTrigger = {};\n\n        //------------------------------------------------------\n        // Hydration\n\n        // Wrapper \n        this.wrapper = document.body;\n\n        // Elements\n        this.domElements = new WeakMap();\n\n        // Types\n        this.cursorTypes = [];\n\n        // Flags\n        this.cursorFlags = [];\n\n        // Custom Render\n        this.customRenderList = {};\n\n        // Configs\n        this.cursorTypeConfig = {};\n\n        this.cursorFlagConfig = {};\n\n        // Cursor Element\n        this.cursorEl = null;\n\n        this.wrapperCursorTypesEl = null;\n\n        this.wrapperCursorFlagsEl = null;\n\n        this.cursorTypeEl = {};\n\n        this.cursorFlagEl = {};\n\n        //------------------------------------------------------\n        // Init\n\n        //this.init();\n\n        //------------------------------------------------------\n        // Complete\n\n        //this.valid = this.complete();\n    \n        return;\n    }\n}\n\n\n//# sourceURL=webpack://Pointerly/./src/core/core.js?\n}");

/***/ }),

/***/ "./src/core/events.js":
/*!****************************!*\
  !*** ./src/core/events.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEventTrigger: () => (/* binding */ addEventTrigger)\n/* harmony export */ });\nfunction addEventTrigger(Pointerly) {\n\n    Pointerly.prototype.on = function (stage, callback, priority = 1000) {\n\n        if (typeof callback === 'function' && this.triggers[stage]) {\n\n            this.triggers[stage].push({ callback, priority });\n\n        } else {\n\n            console.error('Callback deve ser uma função e o estágio deve ser válido (initial, leave, enter).');\n        }\n    };\n\n    Pointerly.prototype.runTriggers = async function (stage, data = null) {\n\n        if (!this.triggers[stage]) {\n\n            console.error(`Estágio inválido: ${stage}`);\n            return;\n        }\n\n        // Ordena por prioridade antes de executar\n        this.triggers[stage].sort((a, b) => a.priority - b.priority);\n\n        if (this.debug) {\n            //console.log(`Funções no estágio \"${stage}\":`);\n            this.triggers[stage].forEach((trigger, index) => {\n                //console.log(`Função ${index + 1}:`, trigger.callback.name || \"Função anônima\");\n                //console.log(`Prioridade: ${trigger.priority}`);\n                //console.log(`Conteúdo da função: ${trigger.callback.toString()}`);\n                //console.log(\"\");\n            });\n        }\n\n        for (const { callback, priority } of this.triggers[stage]) {\n            try {\n                await callback(data);\n            } catch (error) {\n                if (this.debug) {\n                    console.error(`Erro ao executar trigger no estágio \"${stage}\"`);\n                    console.error(`Função:`, callback.name || \"Função anônima\");\n                    console.error(`Prioridade: ${priority}`);\n                    console.error(`Conteúdo da função: ${callback.toString()}`);\n                    console.error(`Erro:`, error);\n                    //console.log(\"\");\n                }\n            }\n        }\n    };\n}\n\n//# sourceURL=webpack://Pointerly/./src/core/events.js?\n}");

/***/ }),

/***/ "./src/core/extras.js":
/*!****************************!*\
  !*** ./src/core/extras.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addExtras: () => (/* binding */ addExtras)\n/* harmony export */ });\nfunction addExtras(Pointerly) {\n\n    Pointerly.prototype.prepareCursorMode = function (mode, data) {\n\n        Object.entries(data).forEach(([variant, value]) => {\n\n            if (mode == 'types') {\n\n                this.cursorTypes.push(variant);\n\n            } else if (mode == 'flags') {\n\n                this.cursorFlags.push(variant);\n            }\n\n            if (\n                typeof value === 'function' ||\n                typeof value === 'string' ||\n                value instanceof Node\n            ) {\n\n                this.customRenderList[`${mode}-${variant}`] = value;\n\n            } else if (typeof value === 'object') {\n\n                if (value.render) {\n\n                    this.customRenderList[`${mode}-${variant}`] = value.render;\n                }\n\n                if (mode == 'flags') {\n\n                    this.cursorFlagConfig[variant] = {\n                        effect: null,\n                        pos: 'default',\n                        smartSize: false,\n                        viewportSafe: false,\n                        size: {\n                            width: null,\n                            height: null\n                        }\n                    };\n\n                    if (value.pos && ['default', 'left', 'right', 'top', 'bottom'].includes(value.pos)) {\n\n                        this.cursorFlagConfig[variant].pos = value.pos;\n                    }\n\n                    if (value.effect && ['chase'].includes(value.effect) && !this.isSafariBrowser()) {\n\n                        this.cursorFlagConfig[variant].effect = value.effect;\n                    }\n\n                    if (value.smartSize && typeof value.smartSize === 'boolean') {\n                        this.cursorFlagConfig[variant].smartSize = value.smartSize;\n                    }\n\n                    if (value.viewportSafe && typeof value.viewportSafe === 'boolean') {\n                        this.cursorFlagConfig[variant].viewportSafe = value.viewportSafe;\n                    }\n                }\n            }\n        });\n    };\n\n    Pointerly.prototype.init = function (data = {}) {\n\n        if (data.debug) this.debug = data.debug;\n\n        this.console.info('Init cursor...');\n\n        if (data.systemCursors) this.systemCursors = data.systemCursors;\n\n        if (data.on) {\n\n            this.addEventTrigger = data.on;\n\n            if (this.addEventTrigger) {\n\n                Object.entries(this.addEventTrigger).forEach(([stage, event]) => {\n\n                    if (typeof event === 'function') {\n\n                        // Se for apenas uma função, assume prioridade padrão\n                        this.on(stage, event);\n\n                    } else if (typeof event === 'object' && typeof event.callback === 'function') {\n\n                        // Se for um objeto, usa a prioridade informada ou 1000 como padrão\n                        this.on(stage, event.callback, event.priority ?? 1000);\n                    }\n                });\n            }\n        }\n\n        // Wrapper \n        if (data.wrapper) {\n            this.wrapper = this.asArray(data.wrapper)[0];\n        }\n\n        if (!this.wrapper) {\n            this.console.error('Wrapper not found');\n            return;\n        }\n\n        const dataCursors = {\n            types: data.types ?? data.cursors ?? {},\n            flags: data.flags ?? {},\n        };\n\n        Object.entries(dataCursors).forEach(([mode, data]) => {\n\n            this.prepareCursorMode(mode, data);\n\n        });\n\n        if (this.cursorTypes.length === 0) {\n            this.console.error('No defined cursor types');\n            return;\n        }\n\n        // Add class in Wrapper Main\n        this.wrapper.classList.add('pointerly-wrapper');\n\n        // Create cursor\n        this.cursorEl = this.createElement('div', {\n\n            class: 'pointerly',\n\n            insertPrepend: this.wrapper\n        });\n\n        // Wrapper Types\n        this.wrapperCursorTypesEl = this.createElement('div', {\n\n            class: ['pointerly-wrapper-cursor-types'],\n\n            insert: this.cursorEl\n        });\n\n        // Types\n        this.cursorTypes.forEach(type => {\n\n            const cursorTypeEl = this.createElement('div', {\n\n                class: ['pointerly-type'],\n                attrs: {\n                    'data-type': type,\n                },\n                insert: this.wrapperCursorTypesEl\n            });\n\n            this.cursorTypeEl[type] = cursorTypeEl;\n\n            this.customRendering(`types-${type}`, cursorTypeEl);\n        });\n\n\n        // Flags\n        if (this.cursorFlags.length) {\n\n            // Wrapper Types\n            this.wrapperCursorFlagsEl = this.createElement('div', {\n\n                class: 'pointerly-wrapper-cursor-flags',\n\n                insert: this.cursorEl\n            });\n\n            this.cursorFlags.forEach(flag => {\n\n                const cursorFlagsClass = ['pointerly-flag'];\n\n                if (this.cursorFlagConfig[flag].effect) {\n                    cursorFlagsClass.push(`pointerly-flag-effect-${this.cursorFlagConfig[flag].effect}`);\n                }\n\n                if (this.cursorFlagConfig[flag].pos !== 'default') {\n                    cursorFlagsClass.push(`pointerly-flag-pos-${this.cursorFlagConfig[flag].pos}`);\n                }\n\n                const cursorFlagEl = this.createElement('div', {\n\n                    class: cursorFlagsClass,\n                    attrs: {\n                        'data-flag': flag,\n                    },\n                    insert: this.wrapperCursorFlagsEl\n                });\n\n                this.cursorFlagEl[flag] = cursorFlagEl;\n\n                this.customRendering(`flags-${flag}`, cursorFlagEl);\n\n            });\n        }\n\n        // System Cursors\n        this.wrapper.setAttribute('data-pointerly-system-cursors', this.systemCursors);\n\n        // Loaded \n        this.wrapper.setAttribute('data-pointerly-loaded', 'true');\n        this.loaded = true;\n\n\n        // Prepare elements\n        this.___prepareAllElements___();\n\n        // Check size viewport\n        window.addEventListener('resize', () => {\n            this.checkSizeViewPort();\n        });\n\n        this.checkSizeViewPort();\n\n        //------------------------------------------------------\n        // Events\n\n        this.startEvents();\n\n        // Trigger Init\n        this.runTriggers('init');\n\n        return true;\n    };\n\n    Pointerly.prototype.checkSizeViewPort = function () {\n\n        this._viewport = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        };\n    };\n\n\n    Pointerly.prototype.refresh = function () {\n\n        this.console.info('Refresh cursor...');\n\n        // Prepare elements\n        this.___prepareAllElements___();\n\n        // Trigger Init\n        this.runTriggers('refresh');\n\n        // Check size viewport \n        this.checkSizeViewPort();\n    };\n\n    Pointerly.prototype.___prepareElement___ = function (element) {\n\n        if (!element) return;\n\n        if (!this.domElements.has(element)) {\n\n            // Set\n            const guessCursorType = this.guessCursorType(element);\n            const isValid = this.cursorTypes.includes(guessCursorType) && guessCursorType !== 'none';\n\n            const guessCursorFlag = this.guessCursorFlag(element);\n\n            this.domElements.set(element, {\n                type: guessCursorType ?? 'default',\n                flag: guessCursorFlag ?? null,\n                valid: isValid,\n            });\n\n            /*element.addEventListener('mouseleave', () => {\n \n                this.cursor.elementUnder = null;\n                this.updateCursor();\n \n            });*/\n        }\n\n        return this.domElements.get(element);\n    };\n\n    Pointerly.prototype.___prepareAllElements___ = function () {\n\n        this.asArray('[data-cursor]').forEach(element => {\n\n            this.___prepareElement___(element);\n            //console.log(element);\n\n            element.addEventListener('pointerenter', () => {\n\n                this.cursor.elementUnder = element;\n                this.updateCursor();\n\n            });\n\n        });\n    };\n\n    Pointerly.prototype.startEvents = function () {\n\n        // Move\n        //this.wrapper.addEventListener('mousemove', (e) => {\n        this.wrapper.addEventListener('pointermove', (e) => {\n\n            if (!this.loaded) return;\n\n            // Enter\n            this.enter(e);\n\n            // Move\n            this.move(e);\n\n        });\n\n        /*this.wrapper.addEventListener('pointerhover', (e) => {\n\n            if (!this.loaded) return;\n\n            // Enter\n            this.enter(e);\n\n        });*/\n\n        // Click\n        this.wrapper.addEventListener('click', (e) => {\n\n            if (!this.loaded) return;\n\n            this.click(e);\n\n        });\n\n        // Double Click\n        this.wrapper.addEventListener('dblclick', (e) => {\n\n            if (!this.loaded) return;\n\n            this.doubleClick(e);\n\n        });\n\n        // Mouse Down\n        this.wrapper.addEventListener('mousedown', (e) => {\n\n            if (!this.loaded) return;\n\n            this.mouseDown(e);\n\n        });\n\n        // Mouse Up\n        this.wrapper.addEventListener('mouseup', (e) => {\n\n            if (!this.loaded) return;\n\n            this.mouseUp(e);\n\n        });\n\n        // Leave\n        this.wrapper.addEventListener('mouseleave', () => {\n\n            if (!this.loaded) return;\n\n            this.leave();\n\n        });\n    };\n\n    Pointerly.prototype.enter = function (e) {\n\n        if (!this.inWrapper) {\n\n            this.console.info(`Enter`);\n\n            this.inWrapper = true;\n            this.cursorEl.classList.add('active');\n\n            this.runTriggers('enter');\n        }\n    };\n\n    Pointerly.prototype.move = function (e) {\n\n        const eventData = this.getEventData(e);\n\n        this.runTriggers('move', eventData);\n\n        // Event\n        this.setLastEvent('move');\n\n        // Config cursor\n        this.cursor.pos.x = eventData.pos.x;\n        this.cursor.pos.y = eventData.pos.y;\n\n        this.cursor.elementUnder = eventData.elementUnder;\n\n        // Move Cursor\n        this.moveCursor();\n\n        // Prepara o element under\n        this.___prepareElement___(this.cursor.elementUnder);\n\n        this.updateCursor();\n    };\n    Pointerly.prototype.moveCursor = function () {\n\n        const { x, y } = this.cursor.pos;\n\n        const cursorFlagCurrent = this.cursor.flag?.current;\n        const config = this.cursorFlagConfig[cursorFlagCurrent] ?? {};\n\n        let effect;\n        let lerp;\n\n        if (config && config.effect) {\n\n            effect = config.effect;\n            if (effect == 'chase') lerp = 0.1;\n        }\n\n        const updatePos = () => {\n\n            if (this.cursorFlags.length) {\n\n                // Types\n                this.wrapperCursorTypesEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n\n                // Flag\n                this.wrapperCursorFlagsEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n\n                /*if (Object.entries(config).length) {\n\n                    if (config.viewportSafe === false) {\n\n                        this.wrapperCursorFlagsEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n\n                    } else {\n\n                        if (config.size.width) {\n\n                            const padding = 20; // ajuste se quiser margem\n\n                            const clampedX = Math.min(Math.max(padding, x), this._viewport.width - config.size.width - padding);\n                            const clampedY = Math.min(Math.max(padding, y), this._viewport.height - config.size.height - padding);\n\n                            this.wrapperCursorFlagsEl.style.transform = `translate3d(${clampedX}px, ${clampedY}px, 0)`;\n\n                        }\n                        else {\n                            // fallback\n                            this.wrapperCursorFlagsEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n                        }\n\n                    }*/\n\n                /*if (this.lastCursorFlag && effect) {\n \n                    // Chase não está tendo efeito com lerp -> Corrigir\n                    if (effect === 'chase') { \n                        \n                        // Flag usa lerp para seguir o mouse com atraso\n                        this.cursor.flag.pos.x += (x - this.cursor.flag.pos.x) * lerp;\n                        this.cursor.flag.pos.y += (y - this.cursor.flag.pos.y) * lerp; \n \n                        this.wrapperCursorFlagsEl.style.transform = `translate3d(${this.cursor.flag.pos.x}px, ${this.cursor.flag.pos.y}px, 0)`;\n                    }\n \n                } else {\n \n                    this.wrapperCursorFlagsEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n                }*/\n\n                //}\n\n            }\n            else {\n\n                this.cursorEl.style.transform = `translate3d(${x}px, ${y}px, 0)`;\n\n            }\n\n\n\n            const distance = Math.sqrt(x * x + y * y);\n\n            if (distance > 0.5) {\n                requestAnimationFrame(updatePos);\n            }\n        };\n\n        updatePos();\n    };\n    Pointerly.prototype.updateCursor = function () {\n\n        // Check Fullscreen\n        this.checkFullscreen();\n\n        // Gambiarra\n        if (this.fullscreenActive) {\n            this.lastCursorFlag = null;\n            this.lastCursorType = null;\n        }\n\n        this.checkIsMobileDevice();\n\n        if (!this.cursor.elementUnder) return;\n\n        const currentElementUnder = this.domElements.get(this.cursor.elementUnder);\n\n        // Update Flag\n        if (this.lastCursorFlag !== currentElementUnder.flag) {\n\n            this.updateCursorFlag(currentElementUnder.flag);\n        }\n\n        // Update Type\n        if (this.lastCursorType !== currentElementUnder.type) {\n\n            this.updateCursorType(currentElementUnder.type, currentElementUnder.valid);\n        }\n\n        this.runTriggers('updateCursor', this.cursor);\n    };\n    Pointerly.prototype.updateCursorType = function (cursorType, validCursor) {\n\n        this.lastCursorType = cursorType;\n\n        this.cursor.type = cursorType;\n\n        Object.values(this.cursorTypeEl).forEach(cursor => {\n\n            if (cursor instanceof Element) {\n                cursor.classList.remove('current');\n            }\n        });\n\n        if (validCursor\n            && this.fullscreenActive === false\n            && this.isMobileDevice === false\n            && (this.cursorTypeEl[cursorType] instanceof Element)) {\n\n            //console.log('valido! fullscreenActive:', this.fullscreenActive);\n\n            this.wrapper.setAttribute('data-pointerly-custom', cursorType);\n            this.wrapper.setAttribute('data-pointerly-system', '');\n            this.wrapper.setAttribute('data-pointerly-valid', 'true');\n\n            this.cursorTypeEl[cursorType].classList.add('current');\n            this.cursorEl.setAttribute('data-cursor-current', cursorType);\n\n\n        } else {\n\n            this.wrapper.setAttribute('data-pointerly-custom', '');\n            this.wrapper.setAttribute('data-pointerly-system', cursorType);\n            this.wrapper.setAttribute('data-pointerly-valid', 'false');\n\n            this.cursorEl.setAttribute('data-cursor-current', '');\n        }\n    };\n    Pointerly.prototype.updateCursorFlag = function (cursorFlag) {\n\n        this.lastCursorFlag = cursorFlag;\n\n        this.cursor.flag.current = cursorFlag;\n\n        Object.values(this.cursorFlagEl).forEach(flag => {\n\n            if (flag instanceof Element) {\n                flag.classList.remove('current');\n            }\n        });\n\n        if (this.fullscreenActive === false\n            && this.isMobileDevice === false\n            && (this.cursorFlagEl[cursorFlag] instanceof Element)) {\n\n            this.cursorFlagEl[cursorFlag].classList.add('current');\n\n            const updateSize = () => {\n\n                /*const rect = this.cursorFlagEl[cursorFlag].getBoundingClientRect();\n\n                this.cursorFlagConfig[cursorFlag].size = {\n                    width: rect.width,\n                    height: rect.height\n                };*/\n\n                const flagEl = this.cursorFlagEl[cursorFlag];\n                const rect = flagEl.getBoundingClientRect();\n\n                // Captura o `transform` computado\n                const computedStyle = window.getComputedStyle(flagEl);\n                const transform = computedStyle.transform;\n\n                let offsetX = 0;\n                let offsetY = 0;\n\n                if (transform && transform !== 'none') {\n\n                    const match = transform.match(/matrix\\(([^)]+)\\)/);\n\n                    if (match) {\n\n                        const values = match[1].split(',').map(parseFloat);\n\n                        if (values.length === 6) {\n                            // matrix(a, b, c, d, tx, ty)\n                            offsetX = values[4];\n                            offsetY = values[5];\n                        }\n                    }\n                }\n\n                this.cursorFlagConfig[cursorFlag].size = {\n                    width: rect.width + offsetX,\n                    height: rect.height + offsetY\n                };\n\n                this.console.log('[Size Updated]', this.cursorFlagConfig[cursorFlag]);\n            };\n\n            if (this.cursorFlagConfig[cursorFlag].smartSize === true) {\n\n                updateSize();\n\n            } else if (!this.checkFlagSizeTimeout[cursorFlag]) {\n\n                // Apenas uma vez, se ainda não foi feito\n                this.checkFlagSizeTimeout[cursorFlag] = setTimeout(() => {\n                    updateSize();\n                }, 500);\n            }\n        }\n    };\n    Pointerly.prototype.leave = function () {\n\n        this.console.info(`Leave`);\n\n        this.inWrapper = false;\n        this.cursorEl.classList.remove('active');\n\n        this.runTriggers('leave');\n    };\n\n    Pointerly.prototype.getEventData = function (event) {\n\n        // Coordinates\n        const x = event.clientX;\n        const y = event.clientY;\n\n        // Element\n        const elementUnder = document.elementFromPoint(event.clientX, event.clientY);\n\n        let eventData = {\n            event: event,\n            pos: {\n                x: x,\n                y: y,\n            },\n            elementUnder: elementUnder,\n        }\n\n        return eventData;\n    };\n\n    //------------------------------------------------------\n    // Set class event\n\n    Pointerly.prototype.setLastEvent = function (event) {\n\n        let className;\n\n        if (event == 'move') className = 'moving';\n        else if (event == 'click') className = 'clicked';\n        else if (event == 'dblclick') className = 'doubleclick';\n        else if (event == 'mousedown') className = 'mousedown';\n        else if (event == 'mouseup') className = 'mouseup';\n\n        if (this.lastEvent != event) {\n            this.wrapper.setAttribute('data-pointerly-last-event', event);\n            this.lastEvent = event;\n        }\n\n        this.cursorEl.classList.add(className);\n\n        // Limpa timeout anterior, se existir\n        if (this.eventClassTimeout[event]) {\n            clearTimeout(this.eventClassTimeout[event]);\n        }\n\n        // Cria novo timeout\n        this.eventClassTimeout[event] = setTimeout(() => {\n            this.cursorEl.classList.remove(className);\n            this.eventClassTimeout[event] = null;\n        }, 100);\n    };\n\n    Pointerly.prototype.validateCustomRendering = function (value, key) {\n\n        if (\n            typeof value === 'function' ||\n            typeof value === 'string' ||\n            value instanceof Node\n        ) {\n            this.customRenderList[key] = value;\n            return true;\n        }\n\n        return false;\n    };\n\n    Pointerly.prototype.customRendering = function (key, insertIn, data = {}) {\n\n        if (!key || !insertIn) return null;\n\n        if (!this.customRenderList[key] || typeof key !== 'string') return null;\n\n        const rawRender = this.customRenderList[key];\n        const customRender = this.resolveRenderOutput(rawRender, this, data);\n\n        if (!customRender) return;\n\n        let inserted;\n\n        if (customRender instanceof DocumentFragment) {\n\n            inserted = Array.from(customRender.childNodes);\n            insertIn.appendChild(customRender);\n\n        } else if (Array.isArray(customRender)) {\n\n            inserted = customRender;\n            insertIn.append(...customRender);\n\n        } else if (customRender instanceof Node) {\n\n            inserted = [customRender];\n            insertIn.appendChild(customRender);\n        }\n\n        return inserted?.[0] || null;\n    };\n\n    Pointerly.prototype.resolveRenderOutput = function (renderItem, context = {}, data = {}) {\n\n        // Se for função, executa passando o contexto e os dados\n        if (typeof renderItem === 'function') {\n\n            const result = renderItem.call(context, data);\n            return this.resolveRenderOutput(result, context, data);\n        }\n\n        // Se for um Node (elemento DOM), retorna direto\n        if (renderItem instanceof Node) {\n\n            return renderItem;\n        }\n\n        // Se for string\n        if (typeof renderItem === 'string') {\n            const trimmed = renderItem.trim();\n\n            // Detecta se é HTML com uma tag no início\n            const isHTML = /^<.+?>/.test(trimmed);\n\n            if (isHTML) {\n\n                const tempContainer = document.createElement('div');\n                tempContainer.innerHTML = trimmed;\n\n                const fragment = document.createDocumentFragment();\n\n                while (tempContainer.firstChild) {\n                    fragment.appendChild(tempContainer.firstChild);\n                }\n\n                return fragment;\n\n            } else {\n\n                // Texto puro\n                return document.createTextNode(trimmed);\n            }\n        }\n\n        // Fallback\n        return null;\n    };\n\n    Pointerly.prototype.guessCursorFlag = function (el) {\n\n        if (!el) return;\n\n        const dataSetCursorFlag = el.getAttribute(this.flagSelector) ?? null;\n\n        return dataSetCursorFlag;\n\n    };\n\n    Pointerly.prototype.guessCursorType = function (el) {\n\n        if (!el) return;\n\n        const dataSetCursorType = el.getAttribute(this.selector) ?? null;\n\n        if (dataSetCursorType) {\n\n            if (dataSetCursorType === 'auto' || dataSetCursorType === 'initial') return 'default';\n\n            return dataSetCursorType;\n        }\n\n        /*const computedCursor = window.getComputedStyle(el).cursor;\n \n        // Se o cursor estiver definido explicitamente e não for 'auto' ou 'default', respeite-o\n        if (computedCursor && !['auto', 'default'].includes(computedCursor)) {\n            return computedCursor;\n        }*/\n\n        const tag = el.tagName.toLowerCase();\n        const type = el.getAttribute('type');\n\n        if (tag === 'input') {\n            if (['text', 'email', 'search', 'url', 'tel', 'password'].includes(type)) return 'text';\n            if (['submit', 'button', 'checkbox', 'radio', 'range', 'file', 'range'].includes(type)) return 'pointer';\n        }\n\n        if (tag === 'textarea') return 'text';\n        if (tag === 'button' || el.onclick) return 'pointer';\n        if (tag === 'a' && el.hasAttribute('href')) return 'pointer';\n\n        // Elementos de texto\n        const textTags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'strong', 'em', 'b', 'i', 'u', 'small', 'mark', 'label'];\n        if (textTags.includes(tag)) return 'text';\n\n        if (el.isContentEditable) return 'text';\n\n        return 'default';\n    };\n\n    Pointerly.prototype.hasWebGLSupport = function () {\n\n        try {\n            const canvas = document.createElement('canvas');\n            return !!(window.WebGLRenderingContext && (\n                canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n            );\n        } catch (e) {\n            return false;\n        }\n    };\n\n    Pointerly.prototype.checkFullscreen = function () {\n\n        this.fullscreenActive = this.isFullscreenActive();\n\n        //console.log(this.fullscreenActive);\n\n        if (this.fullscreenActive === true) {\n            //&& this.fullscreenActiveMsg === false) {\n\n            this.console.log('Fullscreen active');\n            this.fullscreenActiveMsg = true;\n        }\n        else {\n            this.fullscreenActiveMsg = false;\n        }\n\n    };\n\n    Pointerly.prototype.checkIsMobileDevice = function () {\n\n        this.isMobileDevice = this.___isMobileDevice___();\n\n        if (this.isMobileDevice && !this.isMobileDeviceMsg) {\n            this.console.log('Sorry, not compatible with mobile devices');\n            this.isMobileDeviceMsg = true;\n        }\n        else {\n            this.isMobileDeviceMsg = false;\n        }\n    };\n\n    Pointerly.prototype.isFullscreenActive = function () {\n        return !!(\n            document.fullscreenElement ||\n            document.webkitFullscreenElement ||  // Safari\n            document.webkitEnterFullscreen ||\n            document.mozFullScreenElement ||     // Firefox\n            document.msFullscreenElement         // IE/Edge antigo\n        );\n    };\n\n    Pointerly.prototype.delay = function (ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    };\n\n    Pointerly.prototype.isSafariBrowser = function () {\n        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    };\n\n    // Função auxiliar para criar elementos\n    Pointerly.prototype.createElement = function (tag, options = {}) {\n\n        const element = document.createElement(tag);\n\n        // Adiciona classes, atributos e texto, se fornecidos\n        if (options.class) {\n            const classList = Array.isArray(options.class)\n                ? options.class\n                : options.class.trim().split(/\\s+/);\n            element.classList.add(...classList);\n        }\n\n        if (options.attrs) {\n\n            Object.entries(options.attrs).forEach(([key, value]) => element.setAttribute(key, value));\n        }\n\n        if (options.text) element.textContent = options.text;\n\n        if (options.html) element.innerHTML = options.html;\n\n        if (options.insert) {\n            options.insert.appendChild(element);\n        }\n\n        if (options.insertPrepend) {\n            options.insertPrepend.prepend(element);\n        }\n\n        return element;\n    };\n\n    Pointerly.prototype.___isMobileDevice___ = function () {\n        return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|Mobile/i.test(navigator.userAgent);\n    };\n\n    Pointerly.prototype.asArray = function (value, scope = document, leaveStrings = false) {\n\n        if (value instanceof HTMLElement) return [value];\n\n        // Helpers internos\n        const isString = val => typeof val === 'string';\n        const isArray = Array.isArray;\n        const isArrayLike = val =>\n\n            val && typeof val.length === 'number' && typeof val !== 'function';\n\n        const flatten = (arr, keepStrings = false) => {\n\n            arr.reduce((acc, val) => {\n\n                if (isArray(val)) {\n\n                    acc.push(...flatten(val, keepStrings));\n\n                } else if (!keepStrings && isString(val)) {\n\n                    acc.push(...toArray(val, scope, keepStrings));\n\n                } else {\n\n                    acc.push(val);\n                }\n                return acc;\n\n            }, []);\n        };\n\n        // Lógica principal\n\n        if (isString(value) && !leaveStrings) {\n\n            try {\n                return Array.from(scope.querySelectorAll(value));\n\n            } catch (e) {\n\n                return [];\n            }\n        }\n\n        if (isArray(value)) {\n\n            return flatten(value, leaveStrings);\n        }\n\n        if (isArrayLike(value)) {\n\n            return Array.from(value);\n        }\n\n        return value ? [value] : [];\n    };\n\n    Pointerly.prototype.destroy = function () {\n\n        this.debug = false;\n        this.container = null;\n        this.wrapperFields = null;\n        this.submitResponse = null;\n        this.submitButton = null;\n        this.id = null;\n        this.action = '';\n        this.redirect = false;\n        this.lang = 'en';\n        this.messages = {};\n        this.fieldsSet = {};\n        this.errors = null;\n        this.inputCaptcha = null;\n        this.valid = false;\n    };\n    Pointerly.prototype.createConsole = function () {\n\n        if (!this.debug) {\n\n            return {\n                log: () => { },\n                info: () => { },\n                warn: () => { },\n                error: () => { },\n                table: () => { },\n            };\n        }\n\n        const prefix = this.consolePrefix;\n\n        return {\n            log: (...args) => console.log(prefix, ...args),\n            info: (...args) => console.info(prefix, ...args),\n            warn: (...args) => console.warn(prefix, ...args),\n            error: (...args) => console.error(prefix, ...args),\n            table: (...args) => {\n                const data = args.pop();\n                console.log(prefix, ...args);\n                console.table(data);\n            },\n        };\n    };\n    Pointerly.prototype.complete = function () {\n        this.console.info(`Complete`);\n\n        this.runTriggers('complete');\n    };\n    Pointerly.prototype.mouseUp = function (e) {\n\n        const eventData = this.getEventData(e);\n\n        this.console.info(`Mouse up`);\n\n        // Event\n        this.setLastEvent('mouseup');\n\n        this.runTriggers('mouseup', eventData);\n    };\n    Pointerly.prototype.mouseDown = function (e) {\n\n        const eventData = this.getEventData(e);\n\n        this.console.info(`Mouse down`);\n\n        // Event\n        this.setLastEvent('mousedown');\n\n        this.runTriggers('mousedown', eventData);\n    };\n    Pointerly.prototype.doubleClick = function (e) {\n\n        const eventData = this.getEventData(e);\n\n        this.console.info(`Double click`);\n\n        // Event\n        this.setLastEvent('dblclick');\n\n        this.runTriggers('dblclick', eventData);\n    };\n    Pointerly.prototype.click = function (e) {\n\n        const eventData = this.getEventData(e);\n\n        this.console.info(`Click`);\n\n        // Event\n        this.setLastEvent('click');\n\n        this.runTriggers('click', eventData);\n    };\n}\n\n//# sourceURL=webpack://Pointerly/./src/core/extras.js?\n}");

/***/ }),

/***/ "./src/entry.js":
/*!**********************!*\
  !*** ./src/entry.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _styles_global_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/global.css */ \"./src/styles/global.css\");\n/* harmony import */ var _core_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/core.js */ \"./src/core/core.js\");\n/* harmony import */ var _core_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/events.js */ \"./src/core/events.js\");\n/* harmony import */ var _core_extras_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/extras.js */ \"./src/core/extras.js\");\n\n\n\n\n\n\n// Extensions\n(0,_core_extras_js__WEBPACK_IMPORTED_MODULE_3__.addExtras)(_core_core_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n(0,_core_events_js__WEBPACK_IMPORTED_MODULE_2__.addEventTrigger)(_core_core_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n\nconst _instance = new _core_core_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\nconst PointerlyGlobal = {\n    //version: '1.0.0',\n    init: (...args) => _instance.init(...args),\n    refresh: (...args) => _instance.refresh(...args),\n    _instance\n};\n\n// Para uso interno de métodos estáticos que precisam acessar a instância\n_core_core_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]._instance = _instance;\n\nif (typeof window !== 'undefined') {\n    window.Pointerly = PointerlyGlobal;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PointerlyGlobal);\n\n//# sourceURL=webpack://Pointerly/./src/entry.js?\n}");

/***/ }),

/***/ "./src/styles/global.css":
/*!*******************************!*\
  !*** ./src/styles/global.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://Pointerly/./src/styles/global.css?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/entry.js");
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});